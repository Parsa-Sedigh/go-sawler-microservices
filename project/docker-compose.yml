version: '3'

services:

  broker-service:
    build:
      context: ./../broker-service
      dockerfile: ./../broker-service/broker-service.dockerfile
    restart: always
    ports:
      # map port 8080 on my localhost to 80 on the docker image. So we should be able to hit this service on port 8080. Why 80?
      # Since this app would be listening on port 80(webPort var in cmd/api/main)
      - "8080:80"

    # We don't have to set deploy's mode, but we'll be using it later on.
    deploy:
      mode: replicated
      replicas: 1

  authentication-service:
    build:
      context: ./../authentication-service/
      dockerfile: ./../authentication-service/authentication-service.dockerfile
    restart: always
    ports:
      # Specify a port on our machine(8081 because it's not being used) and map it to port 80 in the docker image
      - "8081:80"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      # We wrote postgres in host=postgres, because we named it `postgres` some lines below(the `service name` we want to connect)
      # Also we specified user and password in the postgres service definition just some lines below from here
      DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"

  logger-service:
    build:
      context: ./../logger-service
      dockerfile: ./../logger-service/logger-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1

  postgres:
    image: 'postgres:14.2'
    ports:
      - "5432:5432" # map port 5432 on our local machine to port 5432 in the docker container.
    restart: always

    # we don't need this, but we want to put it
    deploy:
      mode: replicated
      replicas: 1 # we only want 1 instance
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      # This will be a file on our local computer. Note: When we use `:` here, it means `map to`. The second half after colon is inside
      # our docker container
      - ./db-data/postgres/:/var/lib/postgresql/data/

      # Run the init db sql scripts into the postgres docker container in order to set up the tables and data:
      - .:/docker-entrypoint-initdb.d/

  mongo:
    image: 'mongo:4.2.16-bionic'
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db

  mailhog:
    image: 'mailhog/mailhog:latest'
    ports:
      - "1025:1025"
      - "8025:8025"